colnames(b) %in% colnames(Y[[1]])
sum(!colnames(b) %in% colnames(Y[[1]]))
sum(!colnames(b) == colnames(Y[[1]]))
tmp = pcgse_gfa(data=Y, Z=Z, W=model$W[[1]], pc.indexes=1:ncol(Z), gene.sets=b,
gene.statistic="loading", transformation="abs.value", gene.set.statistic="mean.diff",
gene.set.test="cor.adj.parametric")
tmp = pcgse_gfa(data=Y[[1]], Z=Z, W=model$W[[1]], pc.indexes=1:ncol(Z), gene.sets=b,
gene.statistic="loading", transformation="abs.value", gene.set.statistic="mean.diff",
gene.set.test="cor.adj.parametric")
enrichment <- tmp$p.values; colnames(enrichment) <- z_order
View(enrichment)
model$alpha
View(Z)
model$Z[,7]
View(enrichment)
model$alpha
model$Z
x <- 1
y <- 2
tmp <- data.frame(sample=factor(rownames(model$Z)), pcx=model$Z[,x], pcy=model$Z[,y])
View(tmp)
tmp$ighv <- patmeta_filt[tmp$sample,"IGHV"]
ggplot(tmp, aes(x=pcx, y=pcy)) +
geom_point(aes(color=ighv), size=2) +
xlab(sprintf('pc%d',x)) + ylab(sprintf('pc%d',y)) +
theme(panel.background=element_blank())
order(model$alpha)
x <- 1
y <- 7
tmp <- data.frame(sample=factor(rownames(model$Z)), pcx=model$Z[,x], pcy=model$Z[,y])
tmp$ighv <- patmeta_filt[tmp$sample,"IGHV"]
ggplot(tmp, aes(x=pcx, y=pcy)) +
geom_point(aes(color=ighv), size=2) +
xlab(sprintf('pc%d',x)) + ylab(sprintf('pc%d',y)) +
theme(panel.background=element_blank())
## Gene ontology enrichment analysis ##
order(model$alpha)
x <- 1
y <- 9
tmp <- data.frame(sample=factor(rownames(model$Z)), pcx=model$Z[,x], pcy=model$Z[,y])
tmp$ighv <- patmeta_filt[tmp$sample,"IGHV"]
ggplot(tmp, aes(x=pcx, y=pcy)) +
geom_point(aes(color=ighv), size=2) +
xlab(sprintf('pc%d',x)) + ylab(sprintf('pc%d',y)) +
theme(panel.background=element_blank())
x <- 7
y <- 9
tmp <- data.frame(sample=factor(rownames(model$Z)), pcx=model$Z[,x], pcy=model$Z[,y])
tmp$ighv <- patmeta_filt[tmp$sample,"IGHV"]
ggplot(tmp, aes(x=pcx, y=pcy)) +
geom_point(aes(color=ighv), size=2) +
xlab(sprintf('pc%d',x)) + ylab(sprintf('pc%d',y)) +
theme(panel.background=element_blank())
r <- cor(model$Z)
corrplot(r)
####################
## Viability data ##
####################
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(pace)
data(drpar)
data(drugs)
data(patmeta)
# class(drpar) # NChannelSet
drugs
View(drugs)
pData(drpar) # Dataframe
phenoData(drpar) # AnnotatedDataFrame
a = assayData(drpar) # Environment containing matricies of identical size
featureNames(a)
sampleNames(a)
names(a)
Y = as.list(assayData(drpar))
Y <- Y[c("viaraw.1","viaraw.2","viaraw.3","viaraw.4","viaraw.5")]
names(Y) <- c("1","2","3","4","5")
Y <- lapply(Y,t)
# Extract only CLL patients
cll_pat <- rownames(patmeta[patmeta[,"Diagnosis"] == "CLL",])
# There are some patients in the metadata but not in the data
pat <- intersect(cll_pat,rownames(Y[[1]]))
Y <- lapply(Y, function(y) y[rownames(y) %in% pat,])
patmeta_filt <- patmeta[rownames(patmeta) %in% pat,c("Diagnosis","Gender","IGHV","treated")]
source('/Users/ricard/GFA/scGFA/R/scGFA.R')
model_opts <- getDefaultOpts()
model_opts$iter.max <- 300
model_opts$init.Z = "random"
model_opts$init.alpha <- 1
model_opts$verbose = 2
model_opts$M <- length(Y)
model_opts$views <- names(Y)
model_opts$N <- nrow(Y[[1]])
model_opts$tmp.folder = NA
model_opts$save.freq = NA
model_opts$lb.freq = 1
model_opts$init.mu = "maximum-likelihood"
# Initialise latent variable matrix randomly
N <- model_opts$N
K <- 5
Z <- matrix(rnorm(N*K,0,1),N,K)
Z <- cbind(Z,c(0,1)[factor(patmeta_filt$Gender)])
K <- K + 1
ighv <- patmeta_filt$IGHV
ighv[is.na(ighv)] <- sample(c("U","M"), size=sum(is.na(ighv)), replace=T)
Z <- cbind(Z,c(0,1)[factor(ighv)])
K <- K + 1
treated <- patmeta_filt$treated
treated[is.na(treated)] <- sample(c(T,F), size=sum(is.na(treated)), replace=T)
Z <- cbind(Z,c(0,1)[factor(treated)])
K <- K + 1
model_opts$init.Z <- Z
model_opts$covariates <- c( rep(F,10), rep(T,3) )
# Run scGFA
model <- scGFA(Y,K,model_opts)
Y
K
model_opts
# Run scGFA
model <- scGFA(Y,K,model_opts)
model_opts$covariates <- c( rep(F,K), rep(T,3) )
# Run scGFA
model <- scGFA(Y,K,model_opts)
model_opts$covariates
K
dim(Z)
# Initialise latent variable matrix randomly
N <- model_opts$N
K <- 5
Z <- matrix(rnorm(N*K,0,1),N,K)
model_opts$covariates <- rep(F,K)
# add known covariates
# impute randomly the missing values
Z <- cbind(Z,c(0,1)[factor(patmeta_filt$Gender)])
K <- K + 1
model_opts$covariates <- c(model_opts$covariates,T)
ighv <- patmeta_filt$IGHV
ighv[is.na(ighv)] <- sample(c("U","M"), size=sum(is.na(ighv)), replace=T)
Z <- cbind(Z,c(0,1)[factor(ighv)])
K <- K + 1
model_opts$covariates <- c(model_opts$covariates,T)
treated <- patmeta_filt$treated
treated[is.na(treated)] <- sample(c(T,F), size=sum(is.na(treated)), replace=T)
Z <- cbind(Z,c(0,1)[factor(treated)])
K <- K + 1
model_opts$covariates <- c(model_opts$covariates,T)
model_opts$init.Z <- Z
model <- scGFA(Y,K,model_opts)
residual_var <- sapply(1:model_opts$M, function(m) sum(apply(Y[[m]],2,var) - 1/model$tau[[m]]))
total_var <- sapply(1:model_opts$M, function(m) sum(apply(Y[[m]],2,var)))
# Create matrix with alpha values
alpha <- cbind(data.frame(Z=1:ncol(model$alpha)),alpha=t(model$alpha))
pvar <- sapply(1:model_opts$M, function(m) ((model$D[m]/alpha[,1+m])*apply(model$Z,2,var)/residual_var[m]))
pvar <- cbind(1:ncol(model$alpha),pvar)
# colnames(alpha) <- c("Z",model_opts$gc,"expr"); colnames(pvar) <- c("Z",model_opts$gc,"expr")
colnames(alpha) <- c("Z",model_opts$views); colnames(pvar) <- c("Z",model_opts$views)
f <- data.frame(pvar[,-1])
colnames(f) <- names(Y)
rownames(f) <- 1:nrow(f)
col <- colorRampPalette(c("grey100", "grey0"))(100)
library(pheatmap)
pheatmap(f, border_color = "black", main="", color=col,
cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
annotation_row=NA, annotation_col=NA, annotation_colors=NA,
legend=T, annotation_legend=FALSE, treeheight_row=0, treeheight_col=20,
fontsize_row=20, fontsize_col=15, cellheight=30)
x <- 5
y <- 4
tmp <- data.frame(sample=factor(rownames(model$Z)), pcx=model$Z[,x], pcy=model$Z[,y])
tmp$ighv <- patmeta_filt[tmp$sample,"IGHV"]
View(tmp)
ggplot(tmp, aes(x=pcx, y=pcy)) +
geom_point(aes(color=ighv), size=2) +
xlab(sprintf('pc%d',x)) + ylab(sprintf('pc%d',y)) +
theme(panel.background=element_blank())
cor(model$Z,patmeta_filt$IGHV)
model$Z
patmeta_filt$IGHV
cor(model$Z,as.numeric(patmeta_filt$IGHV))
?cor
cor(model$Z,as.numeric(patmeta_filt$IGHV), na.rm=T)
cor(model$Z, as.numeric(patmeta_filt$IGHV), use="all.obs")
cor(model$Z, as.numeric(patmeta_filt$IGHV), use="complete.obs")
model$Z
cor(model$Z[1,], as.numeric(patmeta_filt$IGHV), use="complete.obs")
cor(model$Z[,1], as.numeric(patmeta_filt$IGHV), use="complete.obs")
as.numeric(patmeta_filt$IGHV)
patmeta_filt
patmeta_filt$IGHV
cor(model$Z[,1], ighv, use="complete.obs")
ighv
ighv
ighv_bin <- c(0,1)[factor(ighv)]
cor(model$Z[,1], ighv_bin, use="complete.obs")
cor(model$Z, ighv_bin, use="complete.obs")
library(pace)
data(meth) # RangedSummarizedExperiment
data(patmeta)
tmp = rowRanges(meth) # GRanges
tmp = rowRanges(meth) # GRanges
tmp
tmp[1]
library(scatter)
library(scater)
plotTSNE
showMethods("plotTSNE")
genes <- read.table("/Users/ricard/data/ensembl/mouse/v84/BioMart/protein_coding/Mus_musculus_coding_genes_BioMart.GRCm38.84.txt")[,5]
?read.table
genes <- read.table("/Users/ricard/data/ensembl/mouse/v84/BioMart/protein_coding/Mus_musculus_coding_genes_BioMart.GRCm38.84.txt",
sep="\t", stringsAsFactors=FALSE)[,5]
genes <- read.table("/Users/ricard/data/ensembl/mouse/v84/BioMart/protein_coding/Mus_musculus_coding_genes_BioMart.GRCm38.84.txt",
sep="\t", stringsAsFactors=FALSE, quote="")[,5]
genes
asd <- assayData(expr)$exprs
library(scater)
setwd("/Users/ricard/Downloads/florian")
met_genebody <- list( rate=readRDS("met_matrix_genebody_Filtered.rds"), weight=readRDS("weights_matrix_genebody_Filtered.rds") )
met_genebody <- list( rate=readRDS("met_matrix_promoter_2k_Filtered.rds"), weight=readRDS("weights_matrix_promoter_2k_Filtered.rds") )
expr <- readRDS("sceset_lineages_corr.rds")
asd <- assayData(expr)$exprs
dm(asd)
dim(asd)
head(asd)
fData(expr)
colnames(fData(expr))
fData(expr)$geneID %in% genes
sum(fData(expr)$geneID %in% genes)
expr[genes[fData(expr)$geneID %in% genes,]
)
expr[(genes[fData(expr)$geneID %in% genes,]),]
rownames(expr)
expr[rownames(expr) %in% genes,]
asd <- expr[rownames(expr) %in% genes,]
dim(expr)
genes
asd <- expr[rownames(expr) %in% genes,]
expr
fData(expr)
featureData(expr)
featureData(expr)
rowNames(featureData(expr))
featureNames(featureData(expr))
featureNames(featureData(expr)) %in% rownames(expr)
dim(expr)
featureData(expr)
phenoData(expr)
tmp <- fData(expr)
tmp
?calculateQCMetrics
example_sceset <- calculateQCMetrics(example_sceset)
expr <- calculateQCMetrics(expr)
foo <- fData(expr)
View(tmp)
View(foo)
asd <- expr[rownames(expr) %in% genes,]
keep_feature <- rowSums(counts(expr) > 0) > 4
keep_feature
class(keep_feature)
keep_feature <- rowSums(counts(expr) > 0) > 1
sum(!keep_feature)
rowSums(counts(expr) > 0)
keep_feature <- rowSums(counts(expr) > 0) > 10
expr <- expr[keep_feature,]
expr@cellPairwiseDistances
expr@featurePairwiseDistances
expr@sc3
basedir="/tmp/test"
infolder=paste(basedir,"/model",sep="")
infolder
setwd("/Users/ricard/git/scGFA/R/R")
source("loadModel.R")
model = loadModelfromNpy(paste(basedir,"/model",sep=""))
basedir="/tmp/test"
infolder=paste(basedir,"/model",sep="")
model = loadModelfromNpy(paste(basedir,"/model",sep=""))
opts <- loadTrainingOpts(paste(basedir,"/opts",sep=""))
stats <- loadTrainingStats(paste(basedir,"/stats",sep=""))
opts
stats
names(stats)
data = list()
# List all NumPy files in the directory
files = str_replace( list.files(path=infolder,pattern="*.npy"), ".npy", "" )
# Extract the name of the nodes (W,Z,...)
vars = unique( sapply(files, function(f) strsplit(f, "\\_")[[1]][1]) )
# Loop over nodes
for (v in vars) {
v_files = files[str_detect(files,str_c(v,"_"))]
# Extract the name of the expectation/parameter (E1,E2,cov,mean,...)
params = unique( sapply(v_files, function(f) strsplit(f, "\\_")[[1]][2]) )
data[[v]] <- sapply(params, function(x) NULL)
# Loop over expectations/parameters
for (p in params) {
p_files = v_files[str_detect(v_files,p)]
views = as.numeric( unique( sapply(p_files, function(f) strsplit(f, "\\_")[[1]][3]) ) )
if (all(is.na(views))) {
# Single-view nodes
data[[v]][[p]] = npyLoad(sprintf("%s/%s_%s.npy",infolder,v,p))
} else {
# Multi-view nodes
data[[v]][[p]] = vector("list",length=length(views))
# Loop over views
for (m in views)
data[[v]][[p]][[m]] = npyLoad(sprintf("%s/%s_%s_%s.npy",infolder,v,p,m))
}
}
}
c
v
p
basedir="/tmp/test"
model = loadModelfromNpy(paste(basedir,"/model",sep=""))
model
model$tau
model$tau[[1]]
model$tau
model$tau$E
model$tau$E
gfa <- new("GFATrainedModel", TrainStats=stats, TrainOpts=opts)
source("GFAobject.R")
gfa <- new("GFATrainedModel", TrainStats=stats, TrainOpts=opts)
gfa
gfa@Expectations$tau <- model$tau$E
model = loadModelfromNpy(paste(basedir,"/model",sep=""))
model$alpha
model$Z
model$alpha$E
rbind(model$alpha$E)
?do
do(model$alpha$E,rbind)
do.call(model$alpha$E,rbind)
do.call(rbind,model$alpha$E)
gfa@Expectations$alpha <- do.call(rbind,model$alpha$E)
model$Zeta
model$Zeta$E
gfa@Expectations$Zeta <- model$Zeta$E
GFA_plotViewVsFactor <- function(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA) {
mat = object@Expectations$alpha
p <- pheatmap(, border_color="black", main=title, color=color,
cluster_cols=cluster_cols, cluster_rows=cluster_rows, show_rownames=show_rownames, show_colnames=show_colnames,
legend=legend, treeheight_row=treeheight_row, treeheight_col=treeheight_col,
fontsize_row=fontsize_row, fontsize_col=fontsize_col, cellheight=cellheight, filename=outfile)
return(p)
}
setMethod("plotViewVsFactor", signature("GFATrainedModel"),
function(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA) {
GFA_plotViewVsFactor(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA)
})
setGeneric(name="plotViewVsFactor", def=function(object) { standardGeneric("plotViewVsFactor") })
setMethod("plotViewVsFactor", signature("GFATrainedModel"),
function(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA) {
GFA_plotViewVsFactor(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA)
})
setMethod("plotViewVsFactor", signature("GFATrainedModel"),
function(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA) {
GFA_plotViewVsFactor(object, color, title, cluster_cols, cluster_rows, show_rownames, show_colnames,
legend, treeheight_row, treeheight_col, fontsize_row, fontsize_col, cellheight, cellwidth, outfile)
})
GFA_plotViewVsFactor(gfa)
library(pheatmap)
GFA_plotViewVsFactor(gfa)
GFA_plotViewVsFactor <- function(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA) {
mat = object@Expectations$alpha
p <- pheatmap(mat, border_color="black", main=title, color=color,
cluster_cols=cluster_cols, cluster_rows=cluster_rows, show_rownames=show_rownames, show_colnames=show_colnames,
legend=legend, treeheight_row=treeheight_row, treeheight_col=treeheight_col,
fontsize_row=fontsize_row, fontsize_col=fontsize_col, cellheight=cellheight, filename=outfile)
return(p)
}
GFA_plotViewVsFactor(gfa)
gfa
gfa@Expectations$alpha
GFA_plotViewVsFactor <- function(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=T, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA) {
mat = object@Expectations$alpha
p <- pheatmap(t(mat), border_color="black", main=title, color=color,
cluster_cols=cluster_cols, cluster_rows=cluster_rows, show_rownames=show_rownames, show_colnames=show_colnames,
legend=legend, treeheight_row=treeheight_row, treeheight_col=treeheight_col,
fontsize_row=fontsize_row, fontsize_col=fontsize_col, cellheight=cellheight, filename=outfile)
return(p)
}
GFA_plotViewVsFactor(gfa)
model$alpha
model$alpha$E
gfa@Expectations$alpha
GFA_plotViewVsFactor <- function(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=F, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA) {
mat = object@Expectations$alpha
p <- pheatmap(t(mat), border_color="black", main=title, color=color,
cluster_cols=cluster_cols, cluster_rows=cluster_rows, show_rownames=show_rownames, show_colnames=show_colnames,
legend=legend, treeheight_row=treeheight_row, treeheight_col=treeheight_col,
fontsize_row=fontsize_row, fontsize_col=fontsize_col, cellheight=cellheight, filename=outfile)
return(p)
}
GFA_plotViewVsFactor(gfa)
gfa@Expectations$alpha
infodler
infolder
infolder = "/tmp/test/data"
files = list.files(path=infolder,pattern="*.txt")
files
files = list.files(path=infolder,pattern="*.npy")
files = list.files(path=infolder,pattern="*.npy")
files
data <- list()
files = list.files(path=infolder,pattern="*.npy")
data <- list()
for (file in files) {
view <- strsplit(file, "\\.")[[1]][2]
data[[view]] <- read.table(str_c(infolder,"/",file))
}
?npyLoad
data[[view]] <- npyLoad(str_c(infolder,"/",file))
files = list.files(path=infolder,pattern="*.npy")
data <- list()
for (file in files) {
view <- strsplit(file, "\\.")[[1]][2]
data[[view]] <- npyLoad(str_c(infolder,"/",file))
}
data
data[[1]]
data[[2]]
files
view
files = list.files(path=infolder,pattern="*.npy")
data <- list()
for (file in files) {
view <- strsplit(file, "\\.")[[1]][1]
data[[view]] <- npyLoad(str_c(infolder,"/",file))
}
files
view
data[[1]]
data[[2]]
data[[3]]
data <- loadData(paste(basedir,"/data",sep=""))
data <- loadTrainingData(paste(basedir,"/data",sep=""))
# Input:
# Output:
loadTrainingData <- function(infolder) {
files = list.files(path=infolder,pattern="*.npy")
data <- list()
for (file in files) {
view <- strsplit(file, "\\.")[[1]][1]
data[[view]] <- npyLoad(str_c(infolder,"/",file))
}
return(data)
}
data <- loadTrainingData(paste(basedir,"/data",sep=""))
library(pheatmap)
library(RColorBrewer)
setwd("/Users/ricard/git/scGFA/R/R")
source("GFAobject.R")
source("loadModel.R")
# Create GFA object
basedir="/tmp/test"
model = loadModelfromNpy(paste(basedir,"/model",sep=""))
opts <- loadTrainingOpts(paste(basedir,"/opts",sep=""))
stats <- loadTrainingStats(paste(basedir,"/stats",sep=""))
data <- loadTrainingData(paste(basedir,"/data",sep=""))
gfa <- new("GFATrainedModel", TrainStats=stats, TrainOpts=opts, TrainData=data)
# Spike and Slab expectations
gfa@Expectations$tau <- model$tau$E
gfa@Expectations$S <- model$SW$ES
gfa@Expectations$W <- model$SW$EW
gfa@Expectations$Z <- model$Z$E
gfa@Expectations$alpha <- do.call(rbind,model$alpha$E)
gfa@Expectations$Zeta <- model$Zeta$E
gfa
gfa@TrainOpts
gfa@TrainData
GFA_plotViewVsFactor <- function(object, color=colorRampPalette(c("grey100", "grey0"))(100), title="", cluster_cols=F, cluster_rows=F, show_rownames=T, show_colnames=T,
legend=T, treeheight_row=20, treeheight_col=20, fontsize_row=20, fontsize_col=20, cellheight=NA, cellwidth=NA, outfile=NA) {
mat = object@Expectations$alpha
p <- pheatmap(t(mat), border_color="black", main=title, color=color,
cluster_cols=cluster_cols, cluster_rows=cluster_rows, show_rownames=show_rownames, show_colnames=show_colnames,
legend=legend, treeheight_row=treeheight_row, treeheight_col=treeheight_col,
fontsize_row=fontsize_row, fontsize_col=fontsize_col, cellheight=cellheight, filename=outfile)
return(p)
}
GFA_plotViewVsFactor(gfa)
p <- GFA_plotViewVsFactor(gfa)
print(p)
gfa@Expectations$alpha
gfa@TrainOpts
Y <- gfa@TrainData
a = npyLoad("/private/tmp/test/data/Y_0.npy")
View(a)
a = npyLoad("/private/tmp/test/data/Y_0.npy")
View(a)
a[1,2]
# Function to generate the view vs factor plot
library(pheatmap)
library(RColorBrewer)
setwd("/Users/ricard/git/scGFA/R/R")
source("GFAobject.R")
source("loadModel.R")
# Create GFA object
basedir="/tmp/test"
model = loadModelfromNpy(paste(basedir,"/model",sep=""))
opts <- loadTrainingOpts(paste(basedir,"/opts",sep=""))
stats <- loadTrainingStats(paste(basedir,"/stats",sep=""))
data <- loadTrainingData(paste(basedir,"/data",sep=""))
gfa <- new("GFATrainedModel", TrainStats=stats, TrainOpts=opts, TrainData=data)
